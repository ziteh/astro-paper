---
import Layout from "@layouts/Layout.astro";
import Header from "@components/Header.astro";
import Footer from "@components/Footer.astro";
import Tag from "@components/Tag.astro";
import Datetime from "@components/Datetime";
import type { CollectionEntry } from "astro:content";
import { slugifyStr } from "@utils/slugify";
import ShareLinks from "@components/ShareLinks.astro";
import { SITE } from "@config";
import { experimental_AstroContainer } from "astro/container";
import { getTocFromHtml } from "@utils/toc";
import ToC from "@components/ToC";
import Disqus from "@components/Disqus.astro";

export interface Props {
  post: CollectionEntry<"blog">;
  posts: CollectionEntry<"blog">[];
}

const { post, posts } = Astro.props;

const {
  title,
  author,
  description,
  subtitle,
  ogImage,
  canonicalURL,
  date,
  updated,
  tags,
  categories,
  toc,
  comments,
  slug,
} = post.data;

const { Content } = await post.render();

// https://docs.astro.build/en/reference/container-reference/#rendertostring
const container = await experimental_AstroContainer.create();
const htmlContent = await container.renderToString(Content); // get rendered HTML
const tocTree = getTocFromHtml(htmlContent);
// const toc = getTocFromMarkdown(post.body);

const ogImageUrl = typeof ogImage === "string" ? ogImage : ogImage?.src;
const ogUrl = new URL(
  ogImageUrl ?? `/posts/${slugifyStr(title)}.png`,
  Astro.url.origin
).href;

const layoutProps = {
  title: `${title} | ${SITE.title}`,
  author,
  description,
  date,
  updated,
  canonicalURL,
  ogImage: ogUrl,
  scrollSmooth: true,
};

/* ========== Prev/Next Posts ========== */

const allPosts = posts.map(({ data: { title }, slug }) => ({
  slug,
  title,
}));

const currentPostIndex = allPosts.findIndex(a => a.slug === post.slug);

const prevPost = currentPostIndex !== 0 ? allPosts[currentPostIndex - 1] : null;
const nextPost =
  currentPostIndex !== allPosts.length ? allPosts[currentPostIndex + 1] : null;
---

<Layout {...layoutProps}>
  <Header />

  <!-- <div class="mx-auto flex w-full max-w-3xl justify-start px-2">
    <button
      class="focus-outline mb-2 mt-8 flex hover:opacity-75"
      onclick="(() => (history.length === 1) ? window.location = '/' : history.back())()"
    >
      <svg xmlns="http://www.w3.org/2000/svg"
        ><path
          d="M13.293 6.293 7.586 12l5.707 5.707 1.414-1.414L10.414 12l4.293-4.293z"
        ></path>
      </svg><span>Go back</span>
    </button>
  </div> -->
  <main id="main-content" class="mt-4">
    <ul
      class="my-1 flex flex-col space-y-2 md:flex-row md:space-x-4 md:space-y-0"
    >
      {
        categories.length > 0 && (
          <div class="flex items-center space-x-0.5 opacity-80">
            <svg
              xmlns="http://www.w3.org/2000/svg"
              width="24"
              height="24"
              viewBox="0 0 24 24"
              class="mt-0.5 h-4 w-4"
            >
              <path d="M4 11h6a1 1 0 0 0 1-1V4a1 1 0 0 0-1-1H4a1 1 0 0 0-1 1v6a1 1 0 0 0 1 1zm10 0h6a1 1 0 0 0 1-1V4a1 1 0 0 0-1-1h-6a1 1 0 0 0-1 1v6a1 1 0 0 0 1 1zM4 21h6a1 1 0 0 0 1-1v-6a1 1 0 0 0-1-1H4a1 1 0 0 0-1 1v6a1 1 0 0 0 1 1zm13 0c2.206 0 4-1.794 4-4s-1.794-4-4-4-4 1.794-4 4 1.794 4 4 4z" />
            </svg>
            <span class="text-sm">{categories}</span>
          </div>
        )
      }
      {
        tags.length > 0 && (
          <div class="flex items-center space-x-0.5 opacity-80">
            <svg
              xmlns="http://www.w3.org/2000/svg"
              width="24"
              height="24"
              viewBox="0 0 24 24"
              class="mt-1 h-4 w-4"
            >
              <path d="M12.586 2.586A2 2 0 0 0 11.172 2H4a2 2 0 0 0-2 2v7.172a2 2 0 0 0 .586 1.414l8 8a2 2 0 0 0 2.828 0l7.172-7.172a2 2 0 0 0 0-2.828l-8-8zM7 9a2 2 0 1 1 .001-4.001A2 2 0 0 1 7 9z" />
            </svg>
            {tags.map(tag => (
              <Tag tag={slugifyStr(tag)} />
            ))}
          </div>
        )
      }
    </ul>
    <h1 transition:name={slugifyStr(title)} class="post-title">{title}</h1>
    {subtitle && <h2 class="my-2">{subtitle}</h2>}
    <div class="flex">
      <Datetime
        date={date}
        updated={updated}
        size="lg"
        className="my-2 ml-auto"
      />
    </div>

    <article id="article" class="prose mx-auto mt-8 max-w-3xl">
      <Content />
    </article>

    <!-- Sideber -->
    <div class="sidebar">
      {toc && <ToC toc={tocTree} />}
      <button
        id="back-to-top"
        class="focus-outline whitespace-nowrap py-1 hover:opacity-75"
      >
        <svg xmlns="http://www.w3.org/2000/svg" class="rotate-90">
          <path
            d="M13.293 6.293 7.586 12l5.707 5.707 1.414-1.414L10.414 12l4.293-4.293z"
          ></path>
        </svg>
        <span>Back to Top</span>
      </button>
    </div>

    <!-- ShareLinks -->
    <!-- <div
      class="flex flex-col-reverse items-center justify-between gap-6 sm:flex-row-reverse sm:items-end sm:gap-4"
    >
      <ShareLinks />
    </div> -->

    <hr class="my-6 border-solid" />

    <!-- Previous/Next Post Buttons -->
    <div class="grid grid-cols-1 gap-6 sm:grid-cols-2">
      {
        prevPost && (
          <a
            href={`/posts/${prevPost.slug}`}
            class="flex w-full gap-1 hover:opacity-75"
          >
            <svg
              xmlns="http://www.w3.org/2000/svg"
              width="24"
              height="24"
              viewBox="0 0 24 24"
              fill="none"
              stroke="currentColor"
              stroke-width="2"
              stroke-linecap="round"
              stroke-linejoin="round"
              class="icon icon-tabler icons-tabler-outline icon-tabler-chevron-left flex-none"
            >
              <>
                <path stroke="none" d="M0 0h24v24H0z" fill="none" />
                <path d="M15 6l-6 6l6 6" />
              </>
            </svg>
            <div>
              {/* <span>Previous Post</span> */}
              <div class="text-sm text-skin-accent/85">{prevPost.title}</div>
            </div>
          </a>
        )
      }
      {
        nextPost && (
          <a
            href={`/posts/${nextPost.slug}`}
            class="flex w-full justify-end gap-1 text-right hover:opacity-75 sm:col-start-2"
          >
            <div>
              {/* <span>Next Post</span> */}
              <div class="text-sm text-skin-accent/85">{nextPost.title}</div>
            </div>
            <svg
              xmlns="http://www.w3.org/2000/svg"
              width="24"
              height="24"
              viewBox="0 0 24 24"
              fill="none"
              stroke="currentColor"
              stroke-width="2"
              stroke-linecap="round"
              stroke-linejoin="round"
              class="icon icon-tabler icons-tabler-outline icon-tabler-chevron-right flex-none"
            >
              <>
                <path stroke="none" d="M0 0h24v24H0z" fill="none" />
                <path d="M9 6l6 6l-6 6" />
              </>
            </svg>
          </a>
        )
      }
    </div>

    <!-- Comments -->
    {comments && <Disqus slug={slug} title={title} />}
  </main>
  <Footer />
</Layout>

<style>
  main {
    @apply mx-auto w-full max-w-3xl px-4 pb-12;
  }
  .post-title {
    @apply text-2xl font-semibold text-skin-accent;
  }
</style>

<script is:inline data-astro-rerun>
  /** Create a progress indicator
   *  at the top */
  // function createProgressBar() {
  //   // Create the main container div
  //   const progressContainer = document.createElement("div");
  //   progressContainer.className =
  //     "progress-container fixed top-0 z-10 h-1 w-full bg-skin-fill";

  //   // Create the progress bar div
  //   const progressBar = document.createElement("div");
  //   progressBar.className = "progress-bar h-1 w-0 bg-skin-accent";
  //   progressBar.id = "myBar";

  //   // Append the progress bar to the progress container
  //   progressContainer.appendChild(progressBar);

  //   // Append the progress container to the document body or any other desired parent element
  //   document.body.appendChild(progressContainer);
  // }
  // createProgressBar();

  /** Update the progress bar
   *  when user scrolls */
  // function updateScrollProgress() {
  //   document.addEventListener("scroll", () => {
  //     const winScroll =
  //       document.body.scrollTop || document.documentElement.scrollTop;
  //     const height =
  //       document.documentElement.scrollHeight -
  //       document.documentElement.clientHeight;
  //     const scrolled = (winScroll / height) * 100;
  //     if (document) {
  //       const myBar = document.getElementById("myBar");
  //       if (myBar) {
  //         myBar.style.width = scrolled + "%";
  //       }
  //     }
  //   });
  // }
  // updateScrollProgress();

  function updateTocActiveStatus() {
    let headingElements = [];
    let tocLinks = [];
    let lastVisibleId = null;
    let ticking = false;

    document.addEventListener("DOMContentLoaded", () => {
      const article = document.getElementById("article");
      if (!article) {
        return;
      }

      headingElements = Array.from(article.querySelectorAll("h1, h2, h3, h4"));
      tocLinks = document.querySelectorAll(".toc a");

      // Initial update
      if (headingElements.length > 0) {
        lastVisibleId = headingElements[0].id;
        updateTocStatus(lastVisibleId);
      }
    });

    document.addEventListener("scroll", () => {
      if (!ticking) {
        window.requestAnimationFrame(() => {
          let currentId = null;

          for (const heading of headingElements) {
            const { top } = heading.getBoundingClientRect();
            // If the heading is in the viewport
            if (top >= -10 && top < window.innerHeight / 3) {
              currentId = heading.id;
              break;
            }
          }

          // If there is no visible heading, use the last visible one
          if (!currentId && lastVisibleId) {
            currentId = lastVisibleId;
          }

          if (currentId !== lastVisibleId) {
            updateTocStatus(currentId);
            lastVisibleId = currentId; // Update the last visible ID
          }

          ticking = false;
        });

        ticking = true;
      }
    });

    function updateTocStatus(id) {
      const activedClass = "!text-skin-accent";
      const unactivedClass = "!opacity-80";

      tocLinks.forEach(link => {
        const linkId = link.getAttribute("href").slice(1); // Remove '#'
        if (linkId === id) {
          link.classList.add(activedClass);
          link.classList.remove(unactivedClass);
        } else {
          link.classList.add(unactivedClass);
          link.classList.remove(activedClass);
        }
      });
    }
  }
  updateTocActiveStatus();

  /** Attaches links to headings in the document,
   *  allowing sharing of sections easily */
  function addHeadingLinks() {
    const headings = Array.from(
      document.querySelectorAll("h2, h3, h4, h5, h6")
    );
    for (const heading of headings) {
      heading.classList.add("group");
      const link = document.createElement("a");
      link.className =
        "heading-link ml-2 opacity-0 group-hover:opacity-100 focus:opacity-100";
      link.href = "#" + heading.id;

      const span = document.createElement("span");
      span.ariaHidden = "true";
      span.innerText = "#";
      link.appendChild(span);
      heading.appendChild(link);
    }
  }
  addHeadingLinks();

  /** Attaches copy buttons to code blocks in the document,
   * allowing users to copy code easily. */
  function attachCopyButtons() {
    const copyButtonLabel = "Copy";
    const codeBlocks = Array.from(document.querySelectorAll("pre"));

    for (const codeBlock of codeBlocks) {
      const wrapper = document.createElement("div");
      wrapper.style.position = "relative";

      const copyButton = document.createElement("button");
      copyButton.className =
        "copy-code absolute right-1 top-1 rounded bg-skin-card px-2 py-1 text-xs leading-4 text-skin-base font-medium";
      copyButton.innerHTML = copyButtonLabel;
      codeBlock.setAttribute("tabindex", "0");
      codeBlock.appendChild(copyButton);

      // wrap codebock with relative parent element
      codeBlock?.parentNode?.insertBefore(wrapper, codeBlock);
      wrapper.appendChild(codeBlock);

      copyButton.addEventListener("click", async () => {
        await copyCode(codeBlock, copyButton);
      });
    }

    async function copyCode(block, button) {
      const code = block.querySelector("code");
      const text = code?.innerText;

      await navigator.clipboard.writeText(text ?? "");

      // visual feedback that task is completed
      button.innerText = "Copied";

      setTimeout(() => {
        button.innerText = copyButtonLabel;
      }, 700);
    }
  }
  attachCopyButtons();

  /** Scrolls the document to the top when
   * the "Back to Top" button is clicked. */
  function backToTop() {
    document.querySelector("#back-to-top")?.addEventListener("click", () => {
      document.body.scrollTop = 0; // For Safari
      document.documentElement.scrollTop = 0; // For Chrome, Firefox, IE and Opera
    });
  }
  backToTop();

  /* Go to page start after page swap */
  document.addEventListener("astro:after-swap", () =>
    window.scrollTo({ left: 0, top: 0, behavior: "instant" })
  );
</script>
